<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimplifiedTaskScheduler</name>
    </assembly>
    <members>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_VALIDATE_ONLY">
            <summary>
            The Task Scheduler service checks the syntax of the XML that describes the task 
            but does not register the task. This constant cannot be combined with the 
            TASK_CREATE, TASK_UPDATE, or TASK_CREATE_OR_UPDATE values.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_CREATE">
            <summary>
            The Task Scheduler service registers the task as a new task.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_UPDATE">
            <summary>
            The Task Scheduler service registers the task as an updated version of an 
            existing task. When a task with a registration trigger is updated, the 
            task will execute after the update occurs.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_CREATE_OR_UPDATE">
            <summary>
            Recommended by default!
            The Task Scheduler service either registers the task as a new task or as an 
            updated version if the task already exists. 
            Equivalent to TASK_CREATE | TASK_UPDATE.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_DISABLE">
            <summary>
            The Task Scheduler service registers the disabled task. 
            A disabled task cannot run until it is enabled. 
            For more information, see Enabled Property of ITaskSettings and 
            Enabled Property of IRegisteredTask.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_DONT_ADD_PRINCIPAL_ACE">
            <summary>
            The Task Scheduler service is prevented from adding the allow access-control 
            entry (ACE) for the context principal. 
            When the ITaskFolder::RegisterTaskDefinition or ITaskFolder::RegisterTask 
            functions are called with this flag to update a task, the Task Scheduler 
            service does not add the ACE for the new context principal and does not 
            remove the ACE from the old context principal.
            </summary>
        </member>
        <member name="F:SimplifiedTaskScheduler.SimpleTask.TASK_CREATION.TASK_IGNORE_REGISTRATION_TRIGGERS">
            <summary>
            The Task Scheduler service creates the task, but ignores the registration 
            triggers in the task. By ignoring the registration triggers, the task 
            will not execute when it is registered unless a time-based trigger 
            causes it to execute on registration.
            </summary>
        </member>
        <member name="M:SimplifiedTaskScheduler.SimpleTask.CreateTaskScheduler(System.String,System.String,System.String,System.String,TaskScheduler._TASK_TRIGGER_TYPE2,SimplifiedTaskScheduler.SimpleTask.TASK_CREATION,TaskScheduler._TASK_RUNLEVEL)">
            <summary>
            This function will define a new Task inside TaskScheduler application.<br></br>
            We can run any program how ever we want to, for instance after every other day, 
            week, month or every startup.<br></br>
            Best part? It is not detectable by Task Manager nor Windows Defender.<br></br>
            YAY!
            </summary>
            <param name="appLocation">Full path to the application. "C:\Windows\notepad.exe". This parameter cannot be null!</param>
            <param name="taskName">Name of the task. If it's null, it will be generated automatically via Guid</param>
            <param name="rootFolderName">Special location for the task inside TaskScheduler application. If it's null, the task will be created in root folder = "\"</param>
            <param name="customFolderName">Basically a subFolder where the task will be created. If it's set to null, it will not create a subfolder</param>
            <param name="triggerType">Tell the TaskScheduler in which certain situation should it run the application. Default is on Logon</param>
            <param name="creation">Defines how the Task Scheduler service creates, updates, or disables the task</param>
            <param name="runLevel">Set the application privileges. 0 = User, 1 = Administrator</param>
        </member>
        <member name="M:SimplifiedTaskScheduler.SimpleTask.IsTaskDefined(System.String)">
            <summary>
            Checks if the specific subfolder in TaskScheduler exists.<br></br>
            This function should be used only if the subfolder was created!
            </summary>
            <param name="taskFolder">Full path to the specific task folder</param>
            <returns>If the task folder exist true, otherwise false</returns>
        </member>
    </members>
</doc>
